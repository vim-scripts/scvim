SCVIM is written by Alex Norman, it is in its early stages, use at your own risk
this is SCVIM beta 8
the webpage is here:
http://www.neisis.net/~alex/scvim/

if you have improvements/suggestions email alex at neisis dot net

requirements:
vim/gvim (with the ruby interpreter built in)
bash
supercollider (sclang)
to make help docs:
unrtf and ruby

1) put this ("scvim") directory somewhere useful (I put it in /usr/local/share)

2) create an environment variable SCVIM_DIR that points to where you put this
	directory ie this into your .bashrc file: 
	export SCVIM_DIR=/usr/local/share/scvim

3) add a line to your ~/.vimrc that sources scvimrc (i just copy $SCVIM_DIR/scvimrc to ~/.scvimrc
	and put so ~/.scvimrc in my ~/.vimrc)
	(you can edit ~/.scvimrc to change keybindings etc)


EXTRA: 
	1) I put this in my ~/.sclang.sc so that each time I start sclang I have
		updated Object completion and highlighting, as well as Object Definition Lookup
	//set up the scvim stuff 
	thisProcess.interpreter.executeFile("SCVIM_DIR".getenv ++ "/vim.sc");
	
	you'll probably want to execute the vim.sc file at least once after an
	install of supercollider to get the most up to date Object info

	2) this aliasing this to scvim or something is convenient
	vim -c "source $SCVIM_DIR/ftplugin/supercollider.vim | SClangStart"
	ie:
	alias scvim='vim -c "source $SCVIM_DIR/ftplugin/supercollider.vim | SClangStart"'
	alias gscvim='gvim -c "source $SCVIM_DIR/ftplugin/supercollider.vim | SClangStart"'


Now you should be ready to use scvim

defaults (most work in both command and insert mode): 

:SClangStart starts/restarts the interpreter in an xterm
	(if you want to recompile the supercollider library just type :SClangStart and you'll
	 kill the current interpreter, start up a new one and have a recompiled library)
:SClangKill	kills the xterm/interpreter
(exiting vim also kills the interpreter)

F5 sends a whole block (looks for the outermost parens and sends that data)
F6 sends a single line
F7 calls TempoClock.default.clear;
F8 calls s.freeAll;
F12 calls thisProcess.stop; (ie cmd-.)

in visual mode F5 and F6 both send the whole visual block

use :SChelp to get to SC help topics, or use K on a word (in command mode)
	(this has tab completion)
use :SCdef to see the class definitions for an object, or use ^k (in command or normal mode)
	on a word (this also has tab completion)

HELP DOCS:
you can use scvim_make_help to format the help files in such a way that scvim
can use them [remove rtf formatting], the most simple way to do this is to do
something like:
./scvim_make_help -c -s /usr/local/share/SuperCollider/Help
this will delete any help docs that are in your scvim/docs dir, and copy in the
more up to date [hopefully] docs from /usr/local/share/SuperCollider/Help to
that dir [after they are formatted].  If you have help docs in more than one
location you can now copy in more help docs by doing
./scvim_make_help -s <other location>
or you can do it all in one go by specifying multiple sources
./scvim_make_help -c -s /usr/local/share/SuperCollider/Help -s <other location>

Extra:
I've put the colorscheme that I use in the "extra" folder.  This makes strings,
symbols and chars variations on the same color but all look different.  Feel
free to use/modify it to your liking.

Thanks:
John Yates for providing the indent functionality [which i have changed slightly]
